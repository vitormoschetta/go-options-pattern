sqlFilesPath=/app/sqlfiles
queryStatistics=SELECT CASE WHEN @type ='attention_cost' THEN USD_INTERACTION_GESTION WHEN @type ='iteractions' THEN SUM_INTERACTION_GESTION WHEN @type = 'resolution_time' THEN HORA_CASO ELSE USD_INTERACTION_GESTION END AS VALUE, CASE WHEN @type ='attention_cost' THEN 'USD' WHEN @type ='iteractions' THEN 'Quantity' WHEN @type = 'resolution_time' THEN 'Hours' ELSE 'USD' END AS VALUE_TYPE, COUNT(CASE_ID) as CASES FROM SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS] GROUP BY 1 ORDER BY 1 ASC
filterValues={"user":"user_segment","product":"product","sub_product":"sub_product","country":"site_id","bu": "bu", "solution":"solution", "reason":"reason_contact"}
c2c.restclient.options={"baseUrl": "http://internal.mercadolibre.com","path": "/crm/clicktocall/calls/caseNumber-v2/{case_id}","timeout": 10,"headers": {"X-Caller-Scopes": "admin","X-Admin-Id": "chat","Content-Type": "application/json"}}
contacts.restclient.options={"baseUrl": "http://internal.mercadolibre.com","path": "cx/contacts/search","timeout": 10,"headers": {"X-Caller-Scopes": "admin","X-Admin-Id": "chat","Content-Type": "application/json"}}
queryCategory=WITH TOTAL_COST_BY_ENTITY AS (SELECT CASE WHEN @type ='product' THEN NIVEL_1 WHEN @type ='sub_product' THEN NIVEL_2 WHEN @type='country' THEN SIT_SITE_ID WHEN @type ='user' THEN SEGMENTO_CX_STUDIO WHEN @type ='bu' THEN BUSINESS_UNIT WHEN @type ='solution' THEN solution_name WHEN @type ='reason' THEN NIVEL_3  ELSE BUSINESS_UNIT END AS category, DATE_TRUNC(INCOMING_CASE_DT, MONTH) AS incoming_date, COUNT(CASE_ID) as cases_count, COUNT(NIVEL_2) as level_2_count, COUNT(NIVEL_3) as level_3_count,SUM(USD_INTERACTION_GESTION) AS total_cost FROM SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE USD_INTERACTION_GESTION IS NOT NULL AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0 AND FLAG_EXCLUDE_RANK_LOGIC = 0 [FILTERS] GROUP BY 1,2 HAVING category IS NOT NULL ORDER BY INCOMING_DATE DESC ), TOTAL_COST_BY_MONTH AS ( SELECT incoming_date, SUM(total_cost) AS total_of_month FROM TOTAL_COST_BY_ENTITY GROUP BY incoming_date ) SELECT TOTAL_COST_BY_ENTITY.*, SAFE_DIVIDE(TOTAL_COST_BY_ENTITY.total_cost,TOTAL_COST_BY_MONTH.total_of_month)*100 AS percentage FROM TOTAL_COST_BY_ENTITY JOIN TOTAL_COST_BY_MONTH ON TOTAL_COST_BY_ENTITY.incoming_date = TOTAL_COST_BY_MONTH.incoming_date ORDER BY percentage DESC
querySummaryL1AndL2=WITH  GROUPING_BY_LEVEL_AND_FILTERS AS (  SELECT  BUSINESS_UNIT BU,  NIVEL_1,  COALESCE(NIVEL_2,'') NIVEL_2,  NIVEL_3,  ARRAY_AGG(STRUCT(CASE_ID, CAS_CONTACT_ORIGIN, SIT_SITE_ID, SOURCE_NAME_GROUP, CAS_FAQ_ID, FAQ_TITLE, CI_PROCESS_ID_FIRST, CI_PROCESS_NAME_FIRST, USD_INTERACTION_GESTION, PROMOTERS, PASSIVES, DETRACTORS, SURVEYS, SUM_INTERACTION_GESTION, FLAG_CASE_GPT, CUS_TYPE_MP) ORDER BY FLAG_CASE_GPT DESC LIMIT 1) AS CASE_INFO,  SUM(Q_INCOMING) INC,  SUM(USD_INTERACTION_GESTION) USD,  COUNT(DISTINCT CUST_ID) UU,  ml.min_max_scaler(SUM(Q_INCOMING)) OVER() AS INC_R,  ml.min_max_scaler(SUM(USD_INTERACTION_GESTION)) OVER() AS USD_R,  ml.min_max_scaler(COUNT(DISTINCT CUST_ID)) OVER() AS UU_R  FROM  SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE  WHERE  FLAG_EXCLUDE_RANK_LOGIC = 0 AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0   [FILTERS]  GROUP BY 1,2,3,4  )  SELECT  *,  USD_R * 0.7 + INC_R * 0.2 + UU_R * 0.1 AS CALCULATED_RANK  FROM  GROUPING_BY_LEVEL_AND_FILTERS  ORDER BY CALCULATED_RANK DESC  LIMIT 50
querySummaryMain=WITH GROUPING_BY_LEVEL_AND_FILTERS AS ( SELECT *, USD_R * 0.7 + INC_R * 0.2 + UU_R * 0.1 AS CALCULATED_RANK FROM ( SELECT BUSINESS_UNIT BU, NIVEL_1, COALESCE(NIVEL_2,'') NIVEL_2, NIVEL_3, ARRAY_AGG(STRUCT(CASE_ID, CAS_CONTACT_ORIGIN, SIT_SITE_ID, SOURCE_NAME_GROUP, CAS_FAQ_ID, FAQ_TITLE, CI_PROCESS_ID_FIRST, CI_PROCESS_NAME_FIRST, USD_INTERACTION_GESTION, PROMOTERS, PASSIVES, DETRACTORS, SURVEYS, SUM_INTERACTION_GESTION, FLAG_CASE_GPT, CUS_TYPE_MP) ORDER BY FLAG_CASE_GPT DESC LIMIT 1) AS CASE_INFO, SUM(Q_INCOMING) INC, SUM(USD_INTERACTION_GESTION) USD, COUNT(DISTINCT CUST_ID) UU, ml.min_max_scaler(SUM(Q_INCOMING)) OVER() AS INC_R, ml.min_max_scaler(SUM(USD_INTERACTION_GESTION)) OVER() AS USD_R, ml.min_max_scaler(COUNT(DISTINCT CUST_ID)) OVER() AS UU_R FROM SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE FLAG_EXCLUDE_RANK_LOGIC = 0 AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0 [FILTERS] GROUP BY 1,2,3,4 ) ), RANKING_N3 AS ( SELECT * FROM GROUPING_BY_LEVEL_AND_FILTERS ORDER BY CALCULATED_RANK DESC LIMIT 45 ), INTERMEDIATE_RANKING_N2 AS ( SELECT GROUPING_BY_LEVEL_AND_FILTERS.BU, GROUPING_BY_LEVEL_AND_FILTERS.NIVEL_1, GROUPING_BY_LEVEL_AND_FILTERS.NIVEL_2, 'Todos los motivos' as NIVEL_3, ARRAY_AGG(GROUPING_BY_LEVEL_AND_FILTERS.CASE_INFO[OFFSET(0)] ORDER BY GROUPING_BY_LEVEL_AND_FILTERS.CALCULATED_RANK DESC, GROUPING_BY_LEVEL_AND_FILTERS.CASE_INFO[OFFSET(0)].FLAG_CASE_GPT DESC LIMIT 1) AS CASE_ID, SUM(GROUPING_BY_LEVEL_AND_FILTERS.INC) INC, SUM(GROUPING_BY_LEVEL_AND_FILTERS.USD) USD, SUM(GROUPING_BY_LEVEL_AND_FILTERS.UU) UU, ml.min_max_scaler(SUM(GROUPING_BY_LEVEL_AND_FILTERS.INC)) OVER() AS INC_R, ml.min_max_scaler(SUM(GROUPING_BY_LEVEL_AND_FILTERS.USD)) OVER() AS USD_R, ml.min_max_scaler(SUM(GROUPING_BY_LEVEL_AND_FILTERS.UU)) OVER() AS UU_R FROM GROUPING_BY_LEVEL_AND_FILTERS WHERE CONCAT(GROUPING_BY_LEVEL_AND_FILTERS.NIVEL_1, GROUPING_BY_LEVEL_AND_FILTERS.NIVEL_2) NOT IN (SELECT DISTINCT CONCAT(RANKING_N3.NIVEL_1,RANKING_N3.NIVEL_2) FROM RANKING_N3) AND NIVEL_2 != '' GROUP BY 1,2,3,4 ), RANKING_N2 AS ( SELECT *, USD_R * 0.7 + INC_R * 0.2 + UU_R * 0.1 AS CALCULATED_RANK, FROM INTERMEDIATE_RANKING_N2 ORDER BY CALCULATED_RANK DESC LIMIT 5 ), UNION_RANKING AS ( SELECT RANKINS.BU, RANKINS.NIVEL_1, RANKINS.NIVEL_2, RANKINS.NIVEL_3, RANKINS.INC, RANKINS.USD, RANKINS.UU, RANKINS.CASE_INFO, ml.min_max_scaler(RANKINS.INC) OVER() AS INC_R, ml.min_max_scaler(RANKINS.USD) OVER() AS USD_R, ml.min_max_scaler(RANKINS.UU) OVER() AS UU_R FROM ( SELECT * FROM RANKING_N3 UNION ALL SELECT * FROM RANKING_N2 ) AS RANKINS ) SELECT UR.BU, UR.NIVEL_1, UR.NIVEL_2, CASE WHEN UR.NIVEL_3 = 'Todos los motivos' THEN R3.NIVEL_3 ELSE UR.NIVEL_3 END NIVEL_3, CASE WHEN UR.NIVEL_3 = 'Todos los motivos' THEN R3.INC ELSE UR.INC END INC, CASE WHEN UR.NIVEL_3 = 'Todos los motivos' THEN R3.USD ELSE UR.USD END USD, CASE WHEN UR.NIVEL_3 = 'Todos los motivos' THEN R3.UU ELSE UR.UU END UU, CASE WHEN UR.NIVEL_3 = 'Todos los motivos' THEN R3.CASE_INFO ELSE UR.CASE_INFO END CASE_INFO, ml.min_max_scaler(UR.INC) OVER() AS INC_R, ml.min_max_scaler(UR.USD) OVER() AS USD_R, ml.min_max_scaler(UR.UU) OVER() AS UU_R, UR.CALCULATED_RANK, CASE WHEN UR.NIVEL_3 = 'Todos los motivos' THEN 1 ELSE 0 END FLAG_N2 FROM ( SELECT *, USD_R * 0.7 + INC_R * 0.2 + UU_R * 0.1 AS CALCULATED_RANK FROM UNION_RANKING ) AS UR LEFT JOIN ( SELECT * FROM GROUPING_BY_LEVEL_AND_FILTERS QUALIFY ROW_NUMBER() OVER(PARTITION BY BU, NIVEL_1, NIVEL_2 ORDER BY CALCULATED_RANK DESC) <=1) R3 ON UR.BU = R3.BU AND UR.NIVEL_1 = R3.NIVEL_1 AND UR.NIVEL_2 = R3.NIVEL_2 AND UR.NIVEL_3 = 'Todos los motivos' ORDER BY UR.CALCULATED_RANK DESC, R3.CALCULATED_RANK DESC
queryColumns={"bu": "BUSINESS_UNIT","site_id": "SIT_SITE_ID","product": "NIVEL_1","sub_product": "NIVEL_2","reason_contact": "NIVEL_3","date": "INCOMING_CASE_DT", "user_segment": "SEGMENTO_CX_STUDIO","resolution": "FCR_FLAG","channel": "CAS_CONTACT_ORIGIN","source_group": "SOURCE_NAME_GROUP","promoters": "PROMOTERS","neutral": "PASSIVES","detractors": "DETRACTORS","chat": "WebChat","c2c": "C2C","email": "FORM","level1": "NIVEL_1","level2": "NIVEL_2","level3": "NIVEL_3","solution": "solution_name", "case_id": "CASE_ID"}
queryGeneralCost=WITH GENERAL_COST AS (SELECT  \
                        BUSINESS_UNIT AS BU,    \
                        NIVEL_1 AS N1,   \
                        COALESCE(NIVEL_2,'') AS N2,   \
                        NIVEL_3 AS N3,   \
                        SUM(SUM(USD_INTERACTION_GESTION)) OVER(PARTITION BY BUSINESS_UNIT) AS TOTAL_COST_BU,   \
                        SUM(SUM(Q_INCOMING)) OVER(PARTITION BY BUSINESS_UNIT) AS TOTAL_INCOMING_BU,   \
                        SUM(COUNT(DISTINCT CUST_ID)) OVER(PARTITION BY BUSINESS_UNIT) AS TOTAL_UU_BU,   \
                        SUM(SUM(USD_INTERACTION_GESTION)) OVER(PARTITION BY BUSINESS_UNIT, NIVEL_1) AS TOTAL_COST_N1,   \
                        SUM(SUM(Q_INCOMING)) OVER(PARTITION BY BUSINESS_UNIT, NIVEL_1) AS TOTAL_INCOMING_N1,   \
                        SUM(COUNT(DISTINCT CUST_ID)) OVER(PARTITION BY BUSINESS_UNIT, NIVEL_1) AS TOTAL_UU_N1,   \
                        SUM(SUM(USD_INTERACTION_GESTION)) OVER(PARTITION BY BUSINESS_UNIT, NIVEL_1, NIVEL_2) AS TOTAL_COST_N2,   \
                        SUM(COUNT(DISTINCT CUST_ID)) OVER(PARTITION BY BUSINESS_UNIT, NIVEL_1, NIVEL_2) AS TOTAL_INCOMING_N2,   \
                        SUM(SUM(Q_INCOMING)) OVER(PARTITION BY BUSINESS_UNIT, NIVEL_1, NIVEL_2) AS TOTAL_UU_N2,   \
                        SUM(USD_INTERACTION_GESTION) AS TOTAL_COST_N3,  \
                        SUM(Q_INCOMING) AS TOTAL_INCOMING_N3,   \
                        COUNT(DISTINCT CUST_ID) AS TOTAL_UU_N3   \
                    FROM \
                        SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE   \
                    WHERE \
                        FLAG_EXCLUDE_RANK_LOGIC = 0 \
                        AND REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0 \
                        [FILTERS] \
                        GROUP BY   \
                        BUSINESS_UNIT, \
                        NIVEL_1,  \
                        NIVEL_2, \
                        NIVEL_3), \
                    GENERAL_COST_AND_INDICATORS AS ( \
                    SELECT \
                        GENERAL_COST.*, \
                        ml.min_max_scaler(TOTAL_INCOMING_N1) OVER() AS IND_INC_N1, \
                        ml.min_max_scaler(TOTAL_INCOMING_N2) OVER() AS IND_INC_N2, \
                        ml.min_max_scaler(TOTAL_INCOMING_N3) OVER() AS IND_INC_N3, \
                        ml.min_max_scaler(TOTAL_COST_N1) OVER() AS IND_USD_N1, \
                        ml.min_max_scaler(TOTAL_COST_N2) OVER() AS IND_USD_N2, \
                        ml.min_max_scaler(TOTAL_COST_N3) OVER() AS IND_USD_N3, \
                        ml.min_max_scaler(TOTAL_UU_N1) OVER() AS IND_UU_N1, \
                        ml.min_max_scaler(TOTAL_UU_N2) OVER() AS IND_UU_N2, \
                        ml.min_max_scaler(TOTAL_UU_N3) OVER() AS IND_UU_N3 \
                    FROM GENERAL_COST) \
                    SELECT \
                        BU, \
                        N1,   \
                        N2, \
                        N3,   \
                        TOTAL_COST_BU, \
                        TOTAL_INCOMING_BU,   \
                        TOTAL_UU_BU, \
                        TOTAL_COST_N1,   \
                        TOTAL_INCOMING_N1, \
                        TOTAL_UU_N1,   \
                        TOTAL_COST_N2, \
                        TOTAL_INCOMING_N2,   \
                        TOTAL_UU_N2, \
                        TOTAL_COST_N3,  \
                        TOTAL_INCOMING_N3, \
                        TOTAL_UU_N3, \
                        (IND_USD_N1 * 0.7 + IND_INC_N1 * 0.2 + IND_USD_N1 * 0.1) RANK_N1, \
                        (IND_USD_N2 * 0.7 + IND_INC_N2 * 0.2 + IND_USD_N2 * 0.1) RANK_N2, \
                        (IND_USD_N3 * 0.7 + IND_INC_N3 * 0.2 + IND_USD_N3 * 0.1) RANK_N3 \
                    FROM \
                    GENERAL_COST_AND_INDICATORS
cacheName=cache-beta
hsp_commerce=MBO,MCR,MRD,MEC,MGT,MHN,MNI,MPA,MPY,MSV,MLV
queryTotalCases=WITH TOTAL_CASES AS ( SELECT DATE_TRUNC(INCOMING_CASE_DT, MONTH) AS incoming_date, CASE_ID FROM SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE USD_INTERACTION_GESTION IS NOT NULL AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS] GROUP BY 1,2 ORDER BY CASE_ID DESC LIMIT 50 OFFSET 100 ) SELECT INCOMING_DATE, STRING_AGG(CAST(CASE_ID AS STRING)) CASES FROM TOTAL_CASES GROUP BY 1 
queryFCR=WITH TOTAL_FCR_INFO AS ( SELECT DATE_TRUNC(INCOMING_CASE_DT, MONTH) AS incoming_date, SUM(IF(FCR_FLAG = 1,1,0)) AS total_fcr, SUM(IF(FCR_FLAG = 0,0,1)) AS total_no_fcr, SUM(IF(FCR_FLAG = 1,1,0)) + SUM(IF(FCR_FLAG = 0,0,1)) + SUM(IF(FCR_FLAG IS NULL, 0, 1)) AS total_cases,SUM(IF(FCR_FLAG = 1 ,USD_INTERACTION_GESTION,0))  AS total_cost_fcr, SUM(IF(FCR_FLAG IS NULL OR FCR_FLAG = 0 ,USD_INTERACTION_GESTION,0))  AS total_cost_no_fcr, FROM   SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS] GROUP BY 1 ORDER BY 1) SELECT TOTAL_FCR_INFO.*, SAFE_DIVIDE(TOTAL_FCR,TOTAL_CASES)*100 AS share_count_fcr, SAFE_DIVIDE(TOTAL_NO_FCR,TOTAL_CASES)*100 AS share_count_no_fcr, SAFE_DIVIDE(TOTAL_COST_FCR,TOTAL_COST_FCR+TOTAL_COST_NO_FCR)*100 AS share_fcr_cost,  SAFE_DIVIDE(TOTAL_COST_NO_FCR,TOTAL_COST_FCR+TOTAL_COST_NO_FCR)*100 AS share_no_fcr_cost, FROM TOTAL_FCR_INFO ORDER BY INCOMING_DATE DESC
cases.restclient.options={"baseUrl": "http://internal.mercadolibre.com","path": "cx/cases/{case_id}","timeout": 10,"headers": {"X-Caller-Scopes": "admin","X-Admin-Id": "chat","Content-Type": "application/json"}}
projectID=meli-bi-data
queryGenericLevels=WITH TOTAL_COST_BY_BU AS (SELECT BUSINESS_UNIT, [COLUMNS], DATE_TRUNC(INCOMING_CASE_DT, MONTH) AS incoming_date, COUNT(CASE_ID)AS cases, SUM(USD_INTERACTION_GESTION) AS total_cost_bu FROM SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE USD_INTERACTION_GESTION IS NOT NULL AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS] GROUP BY 1,2,3 ORDER BY INCOMING_DATE DESC), TOTAL_COST_BY_MONTH AS (SELECT INCOMING_DATE, SUM(TOTAL_COST_BU) AS total_of_month FROM TOTAL_COST_BY_BU GROUP BY INCOMING_DATE ) SELECT TOTAL_COST_BY_BU.*, TOTAL_COST_BY_MONTH.TOTAL_OF_MONTH AS cost_by_month, SAFE_DIVIDE(TOTAL_COST_BY_BU.TOTAL_COST_BU,TOTAL_COST_BY_MONTH.TOTAL_OF_MONTH)*100 AS percentage FROM TOTAL_COST_BY_BU JOIN TOTAL_COST_BY_MONTH ON TOTAL_COST_BY_BU.INCOMING_DATE = TOTAL_COST_BY_MONTH.INCOMING_DATE ORDER BY INCOMING_DATE DESC
webchat.restclient.options={"baseUrl": "http://internal.mercadolibre.com","path": "/crm/webchat_backend/transcript/{case_id}","timeout": 10,"headers": {"X-Caller-Scopes": "admin","X-Admin-Id": "chat","Content-Type": "application/json"}}
querySummaryDetail=SELECT CAST(CASE_ID AS INT64) as case_id, ORD_ORDER_ID AS order_id, SOLUTION_ID AS solution_id, SIT_SITE_ID as site_id, FAQ_TITLE as faq_title, SOURCE_NAME_GROUP AS contact_point,FORMAT('%s - %s - %s', CUS_TYPE_MP, CUS_SEGMENT_MP,MP_LTV_CLASSIFICATION) AS segment, CUST_ID AS cust_id,COV_CASE_USD as cobertura,CASE WHEN CAS_CONTACT_ORIGIN = 'WebChat' THEN 'CHAT' WHEN CAS_CONTACT_ORIGIN = 'C2C' THEN 'C2C' WHEN CAS_CONTACT_ORIGIN = 'FORM' THEN 'EMAIL' ELSE 'OTHER' END AS channel, SUM_INTERACTION_GESTION AS interactions_total, USD_OUTGOING_DERIVATION_EXTERNAL, USD_OUTGOING_DERIVATION_EXTERNAL_RETURN, USD_OUTGOING_DERIVATION_INTERNAL,BONIF_CASE_USD, BONIF_CASE_LC, BONIF_DETALLE, BUSINESS_UNIT, solution_name AS answer_tipification, USD_INTERACTION_GESTION  AS case_cost, HORA_CASO AS resolution_time, CASE WHEN PROMOTERS > 0  THEN 'Promoter' WHEN PASSIVES > 0 THEN 'Passive' WHEN DETRACTORS > 0  THEN 'Detractor' ELSE 'Not answered' END AS nps FROM SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE [FILTERS]
meliphone_options={"secretJWTName": "b1fb6d3249e22ab4ace6c80a87a9934174d6c7460277367a302e1dc80e412db4","baseUrl": "https://api.mercadolibre.com/meliphone/backend/v1","basePath": "/audio/","extension": ".wav"}
claims.restclient.options={"baseUrl": "http://internal.mercadolibre.com","path": "/cx/claims/{claim_id}/messages","timeout": 10, "retries":3, "headers": {"X-Caller-Scopes": "admin","X-Admin-Id": "claims","Content-Type": "application/json"}}
cacheTime=168
hsp_fintech=MEC
queryChannels=WITH TOTAL_CHANNELS_INFO AS ( SELECT DATE_TRUNC(INCOMING_CASE_DT, MONTH) AS incoming_date, COUNT(CASE_ID) AS total_cases, COUNTIF(CAS_CONTACT_ORIGIN = 'WebChat')  AS total_cases_chat, SUM(IF(CAS_CONTACT_ORIGIN = 'WebChat',USD_INTERACTION_GESTION,0))  AS total_cost_chat, COUNTIF(CAS_CONTACT_ORIGIN = 'C2C')  AS total_cases_c2c, SUM(IF(CAS_CONTACT_ORIGIN = 'C2C',USD_INTERACTION_GESTION,0))  AS total_cost_c2c, COUNTIF(CAS_CONTACT_ORIGIN = 'FORM')  AS total_cases_form, SUM(IF(CAS_CONTACT_ORIGIN = 'FORM',USD_INTERACTION_GESTION,0))  AS total_cost_form, FROM  SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE  CAS_CONTACT_ORIGIN IN('WebChat', 'C2C', 'FORM') AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS] GROUP BY 1 ORDER BY 1 ) SELECT TOTAL_CHANNELS_INFO.*, TOTAL_COST_CHAT+TOTAL_COST_C2C+TOTAL_COST_FORM AS total_cost, SAFE_DIVIDE(TOTAL_COST_CHAT,TOTAL_COST_CHAT+TOTAL_COST_C2C+TOTAL_COST_FORM)*100 AS percentage_cost_chat, SAFE_DIVIDE(TOTAL_COST_C2C,TOTAL_COST_CHAT+TOTAL_COST_C2C+TOTAL_COST_FORM)*100 AS percentage_cost_c2c, SAFE_DIVIDE(TOTAL_COST_FORM,TOTAL_COST_CHAT+TOTAL_COST_C2C+TOTAL_COST_FORM)*100 AS percentage_cost_form , SAFE_DIVIDE(TOTAL_CASES_CHAT,TOTAL_CASES)*100 AS percentage_cases_chat, SAFE_DIVIDE(TOTAL_CASES_C2C,TOTAL_CASES)*100 AS percentage_cases_c2c, SAFE_DIVIDE(TOTAL_CASES_FORM,TOTAL_CASES)*100 AS percentage_cases_form FROM TOTAL_CHANNELS_INFO ORDER BY INCOMING_DATE DESC 
cross.solutions.options={"baseUrl": "http://cx-cross-solutions-prod.melisystems.com/cx","path":"/cross-solutions/{solution_id}", "timeout":10,"retries":3,"headers":{"X-Caller-Scopes":"admin","X-Admin-Id":"chat","Content-Type":"application/json"}}
queryCases=WITH TOTAL_CASES AS (SELECT CASE_ID, DATE_TRUNC(INCOMING_CASE_DT, MONTH) AS incoming_date, PASSIVES, DETRACTORS, PROMOTERS, USD_INTERACTION_GESTION, SOURCE_NAME_GROUP, FCR_FLAG, CASE WHEN CAS_CONTACT_ORIGIN = 'WebChat' THEN 'CHAT' WHEN CAS_CONTACT_ORIGIN = 'C2C' THEN 'C2C' WHEN CAS_CONTACT_ORIGIN = 'FORM' THEN 'EMAIL' ELSE 'OTHER' END AS channel, CAS_FAQ_ID, FAQ_TITLE FROM  SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE  WHERE  USD_INTERACTION_GESTION IS NOT NULL AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS] GROUP BY 1,2,3,4,5,6,7,8,9,10,11 ), CASES_COUNT AS ( SELECT  COUNT(TOTAL_CASES.CASE_ID) AS quantity FROM  TOTAL_CASES ) SELECT TOTAL_CASES.*, CASES_COUNT.QUANTITY FROM TOTAL_CASES, CASES_COUNT LIMIT @limit OFFSET @offset  
querySummaryL3=WITH  GROUPING_BY_LEVEL_AND_FILTERS AS (  SELECT  BUSINESS_UNIT BU,  NIVEL_1,  COALESCE(NIVEL_2,'') NIVEL_2,  NIVEL_3,  ARRAY_AGG(STRUCT(CASE_ID, CAS_CONTACT_ORIGIN, SIT_SITE_ID, SOURCE_NAME_GROUP, CAS_FAQ_ID, FAQ_TITLE, CI_PROCESS_ID_FIRST, CI_PROCESS_NAME_FIRST, USD_INTERACTION_GESTION, PROMOTERS, PASSIVES, DETRACTORS, SURVEYS, SUM_INTERACTION_GESTION, FLAG_CASE_GPT, CUS_TYPE_MP) ORDER BY FLAG_CASE_GPT DESC LIMIT 50) AS CASE_INFO,  SUM(Q_INCOMING) INC,  SUM(USD_INTERACTION_GESTION) USD,  COUNT(DISTINCT CUST_ID) UU,  ml.min_max_scaler(SUM(Q_INCOMING)) OVER() AS INC_R,  ml.min_max_scaler(SUM(USD_INTERACTION_GESTION)) OVER() AS USD_R,  ml.min_max_scaler(COUNT(DISTINCT CUST_ID)) OVER() AS UU_R  FROM  SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE  WHERE  FLAG_EXCLUDE_RANK_LOGIC = 0 AND  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS]  GROUP BY 1,2,3,4  )  SELECT  *,  USD_R * 0.7 + INC_R * 0.2 + UU_R * 0.1 AS CALCULATED_RANK  FROM  GROUPING_BY_LEVEL_AND_FILTERS  ORDER BY CALCULATED_RANK DESC  LIMIT 1
enableCache=true
queryNPS=WITH TOTAL_NPS_INFO AS ( SELECT DATE_TRUNC(INCOMING_CASE_DT, MONTH) AS incoming_date, SUM(SURVEYS) AS total_surveys, SUM(PROMOTERS) as total_promoters, SUM(PASSIVES) as total_passives, SUM(DETRACTORS) as total_detractors, FROM  SBOX_CX_BI_ADS_CORE.CX_STUDIO_TABLE_SAMPLE WHERE  REVISAR_CLASI_N1 = 0 AND REVISAR_CLASI_N2 = 0 AND REVISAR_CLASI_N3 = 0  [FILTERS] GROUP BY 1 ORDER BY 1 ) SELECT TOTAL_NPS_INFO.*, SAFE_DIVIDE(TOTAL_PROMOTERS,TOTAL_SURVEYS)*100 AS percentage_promoters, SAFE_DIVIDE(TOTAL_PASSIVES,TOTAL_SURVEYS)*100 AS percentage_passives, SAFE_DIVIDE(TOTAL_DETRACTORS,TOTAL_SURVEYS)*100 AS percentage_detractors, SAFE_DIVIDE(TOTAL_PROMOTERS-TOTAL_DETRACTORS,TOTAL_SURVEYS)*100 AS  nps FROM TOTAL_NPS_INFO ORDER BY INCOMING_DATE DESC 
